import consola from "consola";

export const errorCode = {
  403: "Forbidden",
  404: "Page Not Found",
  500: "Internal Server Error",
  503: "Service Unavailable"
};

export const errorMsg = {
  // Type error
  form: { code: "Data Error", message: "Form data is missing" },
  uid: { code: "Data Error", message: "User UID is missing" },
  emailParam: { code: "Data Error", message: "Email address is missing" }
};

export function errorToObject(error) {
  // Error from Axios
  if (error && error.response) {
    if (error.response.data) {
      // Error generated by http-errors (npm) via Axios
      // {status, stack, message, name} = 4XX
      // {status, stack, message} = 4XX
      const { name, message } = error.response.data;
      consola.info("error.response.data");
      if (message && name) return { code: name, message: message };
      if (message && !name) return { code: "Server Error", message: message };
    }
    consola.info("errorHandler - Axios Error - The error could not catch");
    consola.error(error.response);
    return { code: "Server Error", message: "Bed Request" };
  }

  // Error from class functions.https.HttpsError (firebase function)
  // Error from firebase
  if (error && error.code) {
    if (error.code === "auth/requires-recent-login") {
      return {
        code: error.code,
        message: "This request is sensitive and requires recent login"
      };
    }
    return {
      code: error.code,
      message: error.details || error.message || "Firebase function error"
    };
  }

  if (error && error.message) {
    // Error from developer that appears to client
    if (error.message.code && error.message.message) {
      return error.message;
    }
    // Exception Error
    if (error && error.message && typeof error.message === "string") {
      return { code: "Exception Error", message: error.message };
    }
    consola.error("errorHandler - Exception Error - Unknown");
    consola.error(error);
  }
  consola.error("errorHandler - The error could not catch");
  // Default return
  return { code: "Oops", message: "Something went wrong, please try again." };
}
